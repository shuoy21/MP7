options(scipen = 1, digits = 4, width = 80, fig.align = "center")
survival_mod = glm(survived ~ pclass + sex + age + sex : age, data = ptitanic, family = binomial(link = "logit"))
ptitanic = na.omit(ptitanic)
# install.packages("rpart")
# install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
data("ptitanic")
ptitanic = na.omit(ptitanic)
set.seed(420)
trn_idx = sample(nrow(ptitanic), 300)
ptitanic_trn = ptitanic[trn_idx, ]
ptitanic_tst = ptitanic[-trn_idx, ]
survival_mod = glm(survived ~ pclass + sex + age + sex : age, data = ptitanic, family = binomial(link = "logit"))
deviance(survival_mod)
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic, family = binomial(link = "logit"))
anova(null_mod, survival_mod, test = "LRT")
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic, family = binomial(link = "logit"))
anova(null_mod, survival_mod, test = "LRT")
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic, family = binomial(link = "logit"))
anova(null_mod, survival_mod, test = "LRT")
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic, family = binomial(link = "logit"))
anova(null_mod, survival_mod, test = "LRT")[2, ]
anova(null_mod, survival_mod, test = "LRT")[2, ]
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic, family = binomial(link = "logit"))
anova(null_mod, survival_mod, test = "LRT")[2, ]
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic, family = binomial(link = "logit"))
names(anova(null_mod, survival_mod, test = "LRT"))
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic, family = binomial(link = "logit"))
anova(null_mod, survival_mod, test = "LRT")
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic, family = binomial(link = "logit"))
anova(null_mod, survival_mod, test = "LRT")
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic, family = binomial(link = "logit"))
anova(null_mod, survival_mod, test = "LRT")$Pr(>Chi)
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic, family = binomial(link = "logit"))
anova(null_mod, survival_mod, test = "LRT")$Pr(\>Chi)
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic, family = binomial(link = "logit"))
anova(null_mod, survival_mod, test = "LRT")$"Pr(>Chi)"
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic, family = binomial(link = "logit"))
anova(null_mod, survival_mod, test = "LRT")$"Pr(\>Chi)"
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic, family = binomial(link = "logit"))
anova(null_mod, survival_mod, test = "LRT")$"Pr(\>Chi)"
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic, family = binomial(link = "logit"))
anova(null_mod, survival_mod, test = "LRT")$"Pr(>Chi)"
num_sim = 2500
beta_0 = 0.4
beta_1 = 0.35
wald = rep(0, num_sim)
LRT = rep(0, num_sim)
for (i in 1 : num_sim){
eta = beta_0 + beta_1 * x1
p = 1 / (1 + exp(-eta))
y = rbinom(n = sample_size, size = 1, prob = p)
sample_data = data.frame(cbind(y, x1, x2, x3))
model = glm(y ~ ., data = sample_data, family = binomial(link = "logit"))
wald[i] = coef(summary(model))["x2", "z value"]
null_mod = glm(y ~ x1, data = sample_data, family = binomial(link = "logit"))
LRT[i] = 2 * as.numeric(logLik(model) - logLik(null_mod))
}
sample_size = 150
set.seed(120)
x1 = rnorm(n = sample_size)
x2 = rnorm(n = sample_size)
x3 = rnorm(n = sample_size)
num_sim = 2500
beta_0 = 0.4
beta_1 = 0.35
wald = rep(0, num_sim)
LRT = rep(0, num_sim)
for (i in 1 : num_sim){
eta = beta_0 + beta_1 * x1
p = 1 / (1 + exp(-eta))
y = rbinom(n = sample_size, size = 1, prob = p)
sample_data = data.frame(cbind(y, x1, x2, x3))
model = glm(y ~ ., data = sample_data, family = binomial(link = "logit"))
wald[i] = coef(summary(model))["x2", "z value"]
null_mod = glm(y ~ x1, data = sample_data, family = binomial(link = "logit"))
LRT[i] = 2 * as.numeric(logLik(model) - logLik(null_mod))
}
mean(wald > 1)
pnorm(1, lower.tail = FALSE)
mean(LRT > 5)
pchisq(5, df = 2, lower.tail = FALSE)
mean(LRT > 5)
pchisq(5, df = 2, lower.tail = FALSE)
mean(LRT > 5)
pchisq(5, df = 2, lower.tail = FALSE)
num_sim = 2500
beta_0 = 0.4
beta_1 = 0.35
wald = rep(0, num_sim)
LRT = rep(0, num_sim)
for (i in 1 : num_sim){
eta = beta_0 + beta_1 * x1
p = 1 / (1 + exp(-eta))
y = rbinom(n = sample_size, size = 1, prob = p)
sample_data = data.frame(cbind(y, x1, x2, x3))
model = glm(y ~ ., data = sample_data, family = binomial(link = "logit"))
wald[i] = coef(summary(model))[3, 3]
null_mod = glm(y ~ x1, data = sample_data, family = binomial(link = "logit"))
LRT[i] = 2 * as.numeric(logLik(model) - logLik(null_mod))
}
survival_mod = glm(survived ~ pclass + sex + age + sex : age, data = ptitanic_trn, family = binomial(link = "logit"))
deviance(survival_mod)
ptitanic = na.omit(ptitanic)
set.seed(420)
trn_idx = sample(nrow(ptitanic), 300)
ptitanic_trn = ptitanic[trn_idx, ]
ptitanic_tst = ptitanic[-trn_idx, ]
survival_mod = glm(survived ~ pclass + sex + age + sex : age, data = ptitanic_trn, family = binomial(link = "logit"))
deviance(survival_mod)
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic, family = binomial(link = "logit"))
anova(null_mod, survival_mod, test = "LRT")
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic_trn, family = binomial(link = "logit"))
anova(null_mod, survival_mod, test = "LRT")
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic_trn, family = binomial(link = "logit"))
anova(null_mod, survival_mod, test = "LRT")$"Pr(>Chi)"
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic_trn, family = binomial(link = "logit"))
anova(null_mod, survival_mod, test = "LRT")
coef(summary(survival_mod))
coef(summary(survival_mod))[6, 3]
mean(ifelse(predict(survival_mod) > 0, "survived", "died") != ptitanic$survived)
mean(ifelse(predict(survival_mod) > 0, "survived", "died") != ptitanic_trn$survived)
mean(ifelse(predict(ptitanic_tst) > 0, "survived", "died") != ptitanic_tst$survived)
mean(ifelse(predict(survival_mod, ptitanic_tst) > 0, "survived", "died") != ptitanic_tst$survived)
conf_mat = table(predicted = ifelse(predict(ssurvival_mod, ptitanic_tst) > 0, "survived", "died"), actual = ptitanic_tst$survived)
conf_mat = table(predicted = ifelse(predict(survival_mod, ptitanic_tst) > 0, "survived", "died"), actual = ptitanic_tst$survived)
conf_mat[2, 2] / sum(conf_mat[, 2])
conf_mat[1, 1]/ sum(conf_mat[, 1])
ptitanic = na.omit(ptitanic)
set.seed(114)
trn_idx = sample(nrow(ptitanic), 300)
ptitanic_trn = ptitanic[trn_idx, ]
ptitanic_tst = ptitanic[-trn_idx, ]
coef(summary(survival_mod))
mean(ifelse(predict(survival_mod, ptitanic_tst) > 0, "survived", "died") != ptitanic_tst$survived)
conf_mat[2, 2] / sum(conf_mat[, 2])
conf_mat[2, 2] / sum(conf_mat[, 2])
mean(ifelse(predict(survival_mod, ptitanic_tst) > 0, "survived", "died") != ptitanic_tst$survived)
conf_mat = table(predicted = ifelse(predict(survival_mod, ptitanic_tst) > 0, "survived", "died"), actual = ptitanic_tst$survived)
conf_mat[2, 2] / sum(conf_mat[, 2])
conf_mat[1, 1]/ sum(conf_mat[, 1])
ptitanic = na.omit(ptitanic)
set.seed(420)
trn_idx = sample(nrow(ptitanic), 300)
ptitanic_trn = ptitanic[trn_idx, ]
ptitanic_tst = ptitanic[-trn_idx, ]
ptitanic = na.omit(ptitanic)
set.seed(114)
trn_idx = sample(nrow(ptitanic), 300)
ptitanic_trn = ptitanic[trn_idx, ]
ptitanic_tst = ptitanic[-trn_idx, ]
survival_mod = glm(survived ~ pclass + sex + age + sex : age, data = ptitanic_trn, family = binomial(link = "logit"))
deviance(survival_mod)
null_mod = glm(survived ~ sex + age + sex : age, data = ptitanic_trn, family = binomial(link = "logit"))
anova(null_mod, survival_mod, test = "LRT")
mean(ifelse(predict(survival_mod, ptitanic_tst) > 0, "survived", "died") != ptitanic_tst$survived)
conf_mat[2, 2] / sum(conf_mat[, 2])
conf_mat[2, 2] / sum(conf_mat[, 2])
conf_mat = table(predicted = ifelse(predict(survival_mod, ptitanic_tst) > 0, "survived", "died"), actual = ptitanic_tst$survived)
conf_mat[2, 2] / sum(conf_mat[, 2])
conf_mat[1, 1]/ sum(conf_mat[, 1])
ptitanic = na.omit(ptitanic)
set.seed(420)
trn_idx = sample(nrow(ptitanic), 300)
ptitanic_trn = ptitanic[trn_idx, ]
ptitanic_tst = ptitanic[-trn_idx, ]
sample_size = 150
set.seed(114)
x1 = rnorm(n = sample_size)
x2 = rnorm(n = sample_size)
x3 = rnorm(n = sample_size)
num_sim = 2500
beta_0 = 0.4
beta_1 = 0.35
wald = rep(0, num_sim)
LRT = rep(0, num_sim)
for (i in 1 : num_sim){
eta = beta_0 + beta_1 * x1
p = 1 / (1 + exp(-eta))
y = rbinom(n = sample_size, size = 1, prob = p)
sample_data = data.frame(cbind(y, x1, x2, x3))
model = glm(y ~ ., data = sample_data, family = binomial(link = "logit"))
wald[i] = coef(summary(model))[3, 3]
null_mod = glm(y ~ x1, data = sample_data, family = binomial(link = "logit"))
LRT[i] = 2 * as.numeric(logLik(model) - logLik(null_mod))
}
mean(wald > 1)
pnorm(1, lower.tail = FALSE)
mean(LRT > 5)
pchisq(5, df = 2, lower.tail = FALSE)
mean(LRT > 5)
pchisq(5, df = 2, lower.tail = FALSE)
sample_size = 150
set.seed(120)
x1 = rnorm(n = sample_size)
x2 = rnorm(n = sample_size)
x3 = rnorm(n = sample_size)
num_sim = 2500
beta_0 = 0.4
beta_1 = 0.35
wald = rep(0, num_sim)
LRT = rep(0, num_sim)
for (i in 1 : num_sim){
eta = beta_0 + beta_1 * x1
p = 1 / (1 + exp(-eta))
y = rbinom(n = sample_size, size = 1, prob = p)
sample_data = data.frame(cbind(y, x1, x2, x3))
model = glm(y ~ ., data = sample_data, family = binomial(link = "logit"))
wald[i] = coef(summary(model))["x2", "z value"]
null_mod = glm(y ~ x1, data = sample_data, family = binomial(link = "logit"))
LRT[i] = 2 * as.numeric(logLik(model) - logLik(null_mod))
}
mean(wald > 1)
pnorm(1, lower.tail = FALSE)
mean(LRT > 5)
pchisq(5, df = 2, lower.tail = FALSE)
sample_size = 150
set.seed(120)
x1 = rnorm(n = sample_size)
x2 = rnorm(n = sample_size)
x3 = rnorm(n = sample_size)
num_sim = 2500
beta_0 = 0.4
beta_1 = 0.35
wald = rep(0, num_sim)
LRT = rep(0, num_sim)
for (i in 1 : num_sim){
eta = beta_0 + beta_1 * x1
p = 1 / (1 + exp(-eta))
y = rbinom(n = sample_size, size = 1, prob = p)
sample_data = data.frame(cbind(y, x1, x2, x3))
model = glm(y ~ ., data = sample_data, family = binomial(link = "logit"))
wald[i] = coef(summary(model))["x2", "z value"]
null_mod = glm(y ~ x1, data = sample_data, family = binomial(link = "logit"))
LRT[i] = 2 * as.numeric(logLik(model) - logLik(null_mod))
}
hist(wald, main = "Wald Test Statistic", xlab = "Wald Test Statistic", col = "dodgerblue", breaks = 100, prob = TRUE)
curve(dnorm(x), add = TRUE, col = "orange", lwd = 2)
mean(wald > 1)
pnorm(1, lower.tail = FALSE)
mean(LRT > 5)
pchisq(5, df = 2, lower.tail = FALSE)
sample_size = 10
set.seed(120)
x1 = rnorm(n = sample_size)
x2 = rnorm(n = sample_size)
x3 = rnorm(n = sample_size)
num_sim = 2500
beta_0 = 0.4
beta_1 = 0.35
wald = rep(0, num_sim)
LRT = rep(0, num_sim)
for (i in 1 : num_sim){
eta = beta_0 + beta_1 * x1
p = 1 / (1 + exp(-eta))
y = rbinom(n = sample_size, size = 1, prob = p)
sample_data = data.frame(cbind(y, x1, x2, x3))
model = glm(y ~ ., data = sample_data, family = binomial(link = "logit"))
wald[i] = coef(summary(model))["x2", "z value"]
null_mod = glm(y ~ x1, data = sample_data, family = binomial(link = "logit"))
LRT[i] = 2 * as.numeric(logLik(model) - logLik(null_mod))
}
hist(wald, main = "Wald Test Statistic", xlab = "Wald Test Statistic", col = "dodgerblue", breaks = 100, prob = TRUE)
curve(dnorm(x), add = TRUE, col = "orange", lwd = 2)
mean(wald > 1)
pnorm(1, lower.tail = FALSE)
hist(LRT, main = "Likelihood Ratio Test Statistic", breaks = 30, col = "dodgerblue", freq = FALSE)
curve(dchisq(x, df = 2), add = TRUE, col = "orange", lwd = 2)
mean(LRT > 5)
pchisq(5, df = 2, lower.tail = FALSE)
library(boot)
cv.glm(wisc_train, addictive_small, K = 5)$delta[1]
wisc_train = read.csv("wisc-train.csv")
wisc_test = read.csv("wisc-test.csv")
addictive_small = glm(class ~ radius + smoothness + texture, data = wisc_train, family = binomial(link = "logit"))
addictive_all = glm(class ~., data = wisc_train, family = binomial(link = "logit"))
selected = step(glm(class ~. ^ 2, data = wisc_train, family = binomial(link = "logit")), trace = 0)
library(boot)
cv.glm(wisc_train, addictive_small, K = 5)$delta[1]
cv.glm(wisc_train, addictive_all, K = 5)$delta[1]
cv.glm(wisc_train, selected, K = 5)$delta[1]
test_addictive = glm(class ~ radius + smoothness + texture, data = wisc_test, family = binomial(link = "logit"))
mean(iselse(predict(addictive_small, wisc_test) > 0, "M", "B") != wisc_test$class)
test_addictive = glm(class ~ radius + smoothness + texture, data = wisc_test, family = binomial(link = "logit"))
mean(ifelse(predict(addictive_small, wisc_test) > 0, "M", "B") != wisc_test$class)
