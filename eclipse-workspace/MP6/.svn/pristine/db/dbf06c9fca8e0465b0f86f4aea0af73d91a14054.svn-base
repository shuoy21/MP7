import java.util.ArrayList;
import java.util.List;
import org.testng.annotations.Test;
import junit.framework.Assert;

/**
 * Test suite for the DNA class.
 * <p>
 * The provided test suite is correct and complete. You should not need to modify it. However, you
 * should understand it. You may need to augment or write test suites for later MPs.
 *
 * @see <a href="https://cs125.cs.illinois.edu/MP/6/">MP6 Documentation</a>
 */
public class DNATest {

    /** Timeout for DNA tests. Solution takes 100 ms.*/
    private static final int DNA_TEST_TIMEOUT = 10000;

    /**
     * Test longest common subsequence.
     */
    @Test(timeOut = DNA_TEST_TIMEOUT)
    public void testLongestCommonSubsequence() {
        for (DNATestResult testResult : PRECOMPUTED_DNA_TEST_RESULTS) {
            Assert.assertEquals(DNA.getLongestCommonSubsequence(testResult.firstSequence,
                    testResult.secondSequence), testResult.longestCommonSubsequence);
        }
    }
    /**
     * Class for storing trees and pre-computed results for the DNA tests.
     */
    @SuppressWarnings("checkstyle:visibilitymodifier")
    public static class DNATestResult {

        /** First DNA sequence to compare. */
        public DNA firstSequence;

        /** Second DNA sequence to compare. */
        public DNA secondSequence;

        /** Result of the comparison. */
        public DNA longestCommonSubsequence;

        /**
         * Create a new input for the DNA tests.
         *
         * @param setFirstSequence first DNA sequence to compare
         * @param setSecondSequence second DNA sequence to compare
         * @param setLongestCommonSubsequence result of the comparison
         */
        public DNATestResult(final DNA setFirstSequence, final DNA setSecondSequence,
                final DNA setLongestCommonSubsequence) {
            firstSequence = setFirstSequence;
            secondSequence = setSecondSequence;
            longestCommonSubsequence = setLongestCommonSubsequence;
        }
    }

    /** Pre-computed DNA results to use for testing. */
    private static final List<DNATestResult> PRECOMPUTED_DNA_TEST_RESULTS = //
            new ArrayList<DNATestResult>();

    static {
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("ACDG"), new DNA("ACDG"), new DNA("acdg")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("ACDG"), new DNA("AACCDDGG"), new DNA("AcDg")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("AACC"), new DNA("DDGG"), new DNA("")));
        /* BEGIN AUTOGENERATED CODE */
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("ccAg"),
                new DNA("cGDA"),
                new DNA("Ca")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("gaGgccDAg"),
                new DNA("AacggcDc"),
                new DNA("AGGcC")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("gdgcDAGadcDG"),
                new DNA("gcggAGgAcdAAD"),
                new DNA("GGCDAAD")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("agGCgc"),
                new DNA("GAdAAdDGgG"),
                new DNA("AgGG")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("CGDDa"),
                new DNA("ggadAgCgCDgACdc"),
                new DNA("cGDd")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("GcDDgcCACDAA"),
                new DNA("AgggADGCacdDa"),
                new DNA("gDGcacdA")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("CCdCCadC"),
                new DNA("AAdGAccDdAaADgC"),
                new DNA("CcDaDC")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("dACccGAGcAcCcdDA"),
                new DNA("AaCdcdaaCCd"),
                new DNA("aCcAacCd")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("cDadcgagAAa"),
                new DNA("cCaDaGDgCAcadAC"),
                new DNA("cdADcaaa")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("CGacGDc"),
                new DNA("cgDa"),
                new DNA("cGA")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("gCaggagCCCDaDg"),
                new DNA("GGadAcCCccGgDd"),
                new DNA("gAacccDD")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("acDcdDAdCCDdGc"),
                new DNA("GADGCcAgAg"),
                new DNA("aCCAg")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("cDdaCGgacaCgGGAc"),
                new DNA("GGgdGcCDDac"),
                new DNA("DGccAc")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("cacgGDdAcgDcaADd"),
                new DNA("agcdgAgGcd"),
                new DNA("aCggGcd")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("Acgccg"),
                new DNA("DgCaCgAcDa"),
                new DNA("acgc")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("cAcDDdacAgdcg"),
                new DNA("aGaGGAdCADdAA"),
                new DNA("caDdaA")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("dCDCcaA"),
                new DNA("CDdcGCdAa"),
                new DNA("DdCCAA")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("cDCcaCd"),
                new DNA("GCcdcccDgaddda"),
                new DNA("cDccAd")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("ccGgd"),
                new DNA("DAGgDccddGGAdgdD"),
                new DNA("cCGGd")));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("CgggGaa"),
                new DNA("dcaDcAGACDAgAAd"),
                new DNA("CggAa")));
        /* END AUTOGENERATED CODE */
    }
}
