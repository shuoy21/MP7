import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.testng.annotations.Test;
import junit.framework.Assert;

/**
 * Test suite for the DNA class.
 * <p>
 * The provided test suite is correct and complete. You should not need to modify it. However, you
 * should understand it. You may need to augment or write test suites for later MPs.
 *
 * @see <a href="https://cs125.cs.illinois.edu/MP/6/">MP6 Documentation</a>
 */
public class DNATest {

    /** Timeout for DNA tests. Solution takes 100 ms.*/
    private static final int DNA_TEST_TIMEOUT = 10000;

    /**
     * Test longest common subsequence.
     */
    @Test(timeOut = DNA_TEST_TIMEOUT)
    public void testLongestCommonSubsequence() {
        for (DNATestResult testResult : PRECOMPUTED_DNA_TEST_RESULTS) {
<<<<<<< .mine
            Assert.assertEquals(DNA.getCommonSubsequence(testResult.firstSequence,
                    testResult.secondSequence), testResult.longestCommonSubsequence);
||||||| .r15101
=======
            String lcs = DNA.getLongestCommonSubsequence(testResult.firstSequence,
                    testResult.secondSequence).getSequence().toUpperCase();
            Assert.assertTrue(testResult.longestCommonSubsequences.contains(lcs));
>>>>>>> .r15869
        }
    }
    /**
     * Class for storing trees and pre-computed results for the DNA tests.
     */
    @SuppressWarnings("checkstyle:visibilitymodifier")
    public static class DNATestResult {

        /** First DNA sequence to compare. */
        public DNA firstSequence;

        /** Second DNA sequence to compare. */
        public DNA secondSequence;

        /** Result of the comparison. */
        public List<String> longestCommonSubsequences;

        /**
         * Create a new input for the DNA tests.
         *
         * @param setFirstSequence first DNA sequence to compare
         * @param setSecondSequence second DNA sequence to compare
         * @param setLongestCommonSubsequences result of the comparison
         */
        public DNATestResult(final DNA setFirstSequence, final DNA setSecondSequence,
                final List<String> setLongestCommonSubsequences) {
            firstSequence = setFirstSequence;
            secondSequence = setSecondSequence;
            longestCommonSubsequences = setLongestCommonSubsequences;
        }
    }

    /** Pre-computed DNA results to use for testing. */
    private static final List<DNATestResult> PRECOMPUTED_DNA_TEST_RESULTS = //
            new ArrayList<DNATestResult>();

    static {
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("ACDG"), new DNA("ACDG"), Arrays.asList(
                    "ACDG"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("ACDG"), new DNA("AACCDDGG"), Arrays.asList(
                    "ACDG"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("AACC"), new DNA("DDGG"), Arrays.asList(
                    ""
                )));
        /* BEGIN AUTOGENERATED CODE */
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("aCdGcaDGdaA"),
                new DNA("cgaGAcdCDdddCCc"), Arrays.asList(
                "ACDCDD"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("dGgdg"),
                new DNA("CCcGcgAAAAdA"), Arrays.asList(
                "GGD"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("gDAAdCGAdDgGCaaA"),
                new DNA("GgGaDAad"), Arrays.asList(
                "GGADAA",
                "GGGAAA"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("DDcD"),
                new DNA("acADCCggcaG"), Arrays.asList(
                "DC",
                "CD"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("ccdcAC"),
                new DNA("adGGgCca"), Arrays.asList(
                "CCA",
                "DCA",
                "DCC"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("ccGCGcdaggCcC"),
                new DNA("DGgGacda"), Arrays.asList(
                "GGCDA"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("DccGcGcggdGAC"),
                new DNA("CCaaGDCCdaCcADd"), Arrays.asList(
                "CCGCCDAC"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("aCdCCD"),
                new DNA("GaGdA"), Arrays.asList(
                "AD"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("GcDGgaDCaAgGA"),
                new DNA("gAgDDGGd"), Arrays.asList(
                "GDGGD",
                "GDDGG",
                "GGDGG",
                "GADGG"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("AdadadGGDaDdADd"),
                new DNA("DAca"), Arrays.asList(
                "DAA"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("CdagddaGagcagDC"),
                new DNA("cdGgCcaG"), Arrays.asList(
                "CDGGCAG"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("dgaGggacDCCAG"),
                new DNA("ddcccgAGcCGcgc"), Arrays.asList(
                "DGAGCCCG"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("aDcdDGCcAacA"),
                new DNA("CCDAgccDgACGd"), Arrays.asList(
                "CDGCCAC"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("aCacgaGCddDdC"),
                new DNA("CdadCddadAADacG"), Arrays.asList(
                "CACDDDDC"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("gAacagACcaA"),
                new DNA("DcaDdcgACCGdGccG"), Arrays.asList(
                "GACGCC",
                "AACGCC",
                "ACAGCC",
                "ACGACC",
                "CAGACC"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("CAgcCgCGcGDCCdcG"),
                new DNA("cAACdadadGgDaDa"), Arrays.asList(
                "CACGGDD"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("gdcaGAcDAAaac"),
                new DNA("DADGaggdda"), Arrays.asList(
                "DAGADA"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("DDgGa"),
                new DNA("CAdCDcACgGC"), Arrays.asList(
                "DDGG"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("gGcDadDAgc"),
                new DNA("adgAdGA"), Arrays.asList(
                "GADA",
                "DADA",
                "ADDA",
                "GADG",
                "DADG",
                "ADDG",
                "ADAG"
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("gDAaCa"),
                new DNA("GGAg"), Arrays.asList(
                "GA"
                )));
        /* END AUTOGENERATED CODE */
    }
}
